{"version":3,"sources":["components/Cards/index.js","components/Column/index.js","service/index.js","App.js","serviceWorker.js","index.js"],"names":["Cards","index","handleMoveCard","cardIndex","title","length","columns","handleDeleteCard","className","onClick","cards","substr","Column","titleColor","addCardToColumn","moveCard","handleDeleteColumn","handleMoveColumn","style","backgroundColor","map","card","i","key","userInput","window","prompt","url","dataService","handleFetchDate","userID","axios","get","params","userId","serviceAddColumn","columnName","color","post","serviceDeleteColumn","columnIndex","serviceDeleteCard","serviceAddCard","cardName","serviceMoveCard","currentColumn","nextColumn","serviceMoveColumn","targetColumn","App","useState","setColumns","width","setWidth","setColor","setLength","useEffect","a","result","console","log","data","columnDate","fetchDate","finalCardIndex","Math","random","getRandomColor","wid","handleAddCard","input","handleAddColumn","column","col","shortid","generate","scrollTo","left","behavior","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4a3dfd6c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./index.css\";\n\nexport default function Cards({\n  index,\n  handleMoveCard,\n  cardIndex,\n  title,\n  length,\n  columns,\n  handleDeleteCard,\n}) {\n  const deleteCard = () => {\n    handleDeleteCard(index, cardIndex);\n  };\n  return (\n    <div className=\"card\">\n      {index !== 0 && (\n        <div className=\"prev\">\n          <button onClick={() => handleMoveCard(index, index - 1, cardIndex)}>\n            Prev\n          </button>\n        </div>\n      )}\n      <div className=\"content\">{title}</div>\n      <button onClick={deleteCard}>\n        Delete {columns[index].cards[cardIndex].title.substr(0, 3)}\n      </button>\n\n      {index !== length && (\n        <div className=\"next\">\n          <button onClick={() => handleMoveCard(index, index + 1, cardIndex)}>\n            Next\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport Card from \"../Cards\";\nimport \"./index.css\";\n\nexport default function Column({\n  index,\n  title,\n  titleColor,\n  addCardToColumn,\n  cards,\n  moveCard,\n  handleDeleteColumn,\n  length,\n  columns,\n  handleDeleteCard,\n  handleMoveColumn\n}) {\n  const handleAddCard = () => {\n    const userInput = window.prompt(\"Please write a card name\");\n    if (userInput) {\n      addCardToColumn(userInput, index);\n    }\n  };\n  const deleteCard = () => {\n    const sure = window.prompt(\n      \"If you do wanna delete this card, input Text yes \"\n    );\n    if (sure === \"yes\") {\n      handleDeleteColumn(index);\n    }\n  };\n\n  return (\n    <div className=\"column-container\">\n        <div className='col-top' style={{ backgroundColor: titleColor }}>\n                {\n                index !== 0 && (\n                    <div className=\"prev\">\n                    <button onClick={() => handleMoveColumn(index, index - 1)}>\n                        Prev\n                    </button>\n                    </div>\n                )\n                }\n                <div className=\"header\" >\n                    {title}\n                </div>\n                {index !== length && (\n                    <div className=\"next\">\n                    <button onClick={() => handleMoveColumn(index, index + 1)}>\n                        Next\n                    </button>\n                    </div>\n                )}\n        </div>\n       \n      <div className=\"list\">\n                    {\n              cards &&(\n                cards.map((card, i) => (\n                    <Card\n                      handleMoveCard={moveCard}\n                      index={index}\n                      key={i}\n                      title={card.title}\n                      cardIndex={i}\n                      length={length}\n                      columns={columns}\n                      handleDeleteCard={handleDeleteCard}\n                    />\n                    )))\n                }\n          \n        \n      </div>\n      <div className=\"footer\">\n        <button onClick={handleAddCard}>+ Add a card</button>\n      </div>\n      <button className=\"clo-delete\" onClick={deleteCard}>\n        Delete {columns[index].title}\n      </button>\n    </div>\n  );\n}\n","import axios from \"axios\";\n\nconst url = \"https://shanyinkanban.herokuapp.com/users\";\n\nconst handleFetchDate = (userID) => {\n  const data = axios.get(`${url}/fetch`, {\n    params: { userId: userID },\n  });\n  return data;\n};\nconst serviceAddColumn = (userId, columnName, color) => {\n  const data = axios.post(`${url}/add`, {\n    userId,\n    columnName,\n    color,\n  });\n  return data;\n};\nconst serviceDeleteColumn = (userId, columnIndex) => {\n  const data = axios.post(`${url}/delete`, {\n    userId,\n    columnIndex,\n  });\n  return data;\n};\nconst serviceDeleteCard = (userId, columnIndex, cardIndex) => {\n  const data = axios.post(`${url}/deleteCard`, {\n    userId,\n    columnIndex,\n    cardIndex,\n  });\n  return data;\n};\n\nconst serviceAddCard = (userId, columnIndex, cardName) => {\n  const data = axios.post(`${url}/addCard`, {\n    userId,\n    columnIndex,\n    cardName,\n  });\n  return data;\n};\nconst serviceMoveCard = (userId, currentColumn, nextColumn, cardIndex) => {\n  const data = axios.post(`${url}/moveCard`, {\n    userId,\n    currentColumn,\n    nextColumn,\n    cardIndex,\n  });\n  return data;\n};\nconst serviceMoveColumn = (userId, currentColumn, targetColumn) => {\n  const data = axios.post(`${url}/moveColumn`, {\n    userId,\n    currentColumn,\n    targetColumn,\n  });\n  return data;\n};\n\nconst dataService = {\n  handleFetchDate,\n  serviceAddColumn,\n  serviceDeleteColumn,\n  serviceDeleteCard,\n  serviceAddCard,\n  serviceMoveCard,\n  serviceMoveColumn,\n};\n\nexport default dataService;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Column from \"./components/Column\";\nimport { useEffect } from \"react\";\nimport dataService from \"./service/index\";\nimport shortid from \"shortid\";\n\nfunction App() {\n  const [columns, setColumns] = useState([]);\n  const [width, setWidth] = useState(\"\");\n  const [color, setColor] = useState(\"\");\n  const [length, setLength] = useState(3);\n  const userId = \"5ed705b53d91074e065ef8ca\";\n\n  useEffect(() => {\n    const fetchDate = async () => {\n      const result = await dataService.handleFetchDate(userId);\n      console.log(result);\n      setColumns(result.data.data.columnDate);\n    };\n    fetchDate();\n  }, []);\n\n  useEffect(() => {\n    const fetchDate = async () => {\n      const result = await dataService.handleFetchDate(userId);\n      const finalCardIndex = result.data.data.columnDate.length;\n      setLength(finalCardIndex - 1);\n    };\n    fetchDate();\n  }, [columns, length]);\n\n  useEffect(() => {\n    const getRandomColor = () => {\n      let color = \"hsl(\" + Math.random() * 360 + \", 100%,75%)\";\n      setColor(color);\n    };\n    getRandomColor();\n  }, [width]);\n\n  useEffect(() => {\n    const fetchDate = async () => {\n      const result = await dataService.handleFetchDate(userId);\n      const wid = result.data.data.columnDate.length * 380 + 500;\n      setWidth(wid);\n    };\n    fetchDate();\n  }, [width, columns]);\n\n  const handleAddCard = async (input, index) => {\n    await dataService.serviceAddCard(userId, index, input);\n\n    const result = await dataService.handleFetchDate(userId);\n    setColumns(result.data.data.columnDate);\n  };\n\n  const handleMoveCard = async (currentColumn, nextColumn, cardIndex) => {\n    await dataService.serviceMoveCard(\n      userId,\n      currentColumn,\n      nextColumn,\n      cardIndex\n    );\n    const result = await dataService.handleFetchDate(userId);\n    setColumns(result.data.data.columnDate);\n  };\n\n  const handleAddColumn = async () => {\n    const userInput = window.prompt(\"Please write a list name\");\n    if (userInput) {\n      await dataService.serviceAddColumn(userId, userInput, color);\n    }\n    const result = await dataService.handleFetchDate(userId);\n    setColumns(result.data.data.columnDate);\n  };\n\n  const handleDeleteColumn = async (columnIndex) => {\n    await dataService.serviceDeleteColumn(userId, columnIndex);\n    const result = await dataService.handleFetchDate(userId);\n    setColumns(result.data.data.columnDate);\n  };\n\n  const handleDeleteCard = async (columnIndex, cardIndex) => {\n    await dataService.serviceDeleteCard(userId, columnIndex, cardIndex);\n    const result = await dataService.handleFetchDate(userId);\n    setColumns(result.data.data.columnDate);\n  };\n\n  const handleMoveColumn = async (currentColumn, targetColumn) => {\n    await dataService.serviceMoveColumn(userId, currentColumn, targetColumn);\n\n    const result = await dataService.handleFetchDate(userId);\n    setColumns(result.data.data.columnDate);\n  };\n\n  const trackColumn = (index) => {\n    window.scrollTo({\n      left: index * 350,\n      behavior: \"smooth\",\n    });\n  };\n  const moveEnd = () => {\n    window.scrollTo({\n      left: width,\n      behavior: \"smooth\",\n    });\n  };\n\n  return (\n    <div className=\"App\" style={{ width: `${width}px` }}>\n      <div className=\"columns-container\">\n        {columns &&\n          columns.map((column, i) => (\n            <Column\n              key={i}\n              moveCard={handleMoveCard}\n              addCardToColumn={handleAddCard}\n              index={i}\n              titleColor={column.color}\n              cards={column.cards}\n              title={column.title}\n              handleDeleteColumn={handleDeleteColumn}\n              length={length}\n              columns={columns}\n              handleDeleteCard={handleDeleteCard}\n              handleMoveColumn={handleMoveColumn}\n            />\n          ))}\n        <button onClick={handleAddColumn} className=\"clo-bt\">\n          Add a new List\n        </button>\n      </div>\n\n      <div className=\"small-map\">\n        {columns &&\n          columns.map((col, i) => (\n            <div key={shortid.generate()} className=\"small-card\">\n              <button\n                style={{ backgroundColor: col.color }}\n                onClick={() => trackColumn(i)}\n              >\n                {col.title.substr(0, 10)}\n              </button>\n            </div>\n          ))}\n        <button onClick={moveEnd} className=\"small-add\">\n          Add\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}